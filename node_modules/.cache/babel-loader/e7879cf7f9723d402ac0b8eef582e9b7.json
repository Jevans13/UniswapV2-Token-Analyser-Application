{"ast":null,"code":"import _taggedTemplateLiteral from \"/Users/jackevans/Documents/GitHub/ULA-MScCompSci/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nvar _this = this,\n    _templateObject,\n    _jsxFileName = \"/Users/jackevans/Documents/GitHub/ULA-MScCompSci/src/routes/TopTokens.jsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport gql from 'graphql-tag';\nimport { useQuery } from '@apollo/react-hooks';\nimport { useHistory } from 'react-router-dom';\nimport '../components/App.css';\nimport { ApolloClient } from 'apollo-client';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport { HttpLink } from 'apollo-link-http';\nimport { ApolloTableQL } from 'react-tableql';\nimport { ApolloProvider } from '@apollo/client';\nimport { Tag, TagLabel, Box, Center, Spinner, Stack, VStack, Heading } from \"@chakra-ui/react\";\nimport '../components/App.css';\nimport Navbar from '../components/Navbar.js';\nexport var client = new ApolloClient({\n  link: new HttpLink({\n    uri: 'https://api.thegraph.com/subgraphs/name/uniswap/uniswap-v2'\n  }),\n  fetchOptions: {\n    mode: 'no-cors'\n  },\n  cache: new InMemoryCache()\n});\n\nvar TopTokens = function TopTokens() {\n  _s();\n\n  var history = useHistory();\n\n  var handleRouteToken = function handleRouteToken(props) {\n    history.push({\n      pathname: \"/Token\",\n      state: {\n        props: props\n      }\n    });\n  }; //https://github.com/Danilo-Zekovic/react-tableql\n  //Table data query:\n\n\n  var DAY_DATA = gql(_templateObject || (_templateObject = _taggedTemplateLiteral([\"\\n    query\\n    tokens($date: Int!){\\n      tokenDayDatas(first:100, orderBy: dailyVolumeUSD, orderDirection: desc,\\n      where: {date: $date}\\n      skip: 0) {\\n        id\\n        token {\\n          symbol\\n          name\\n          id\\n        }\\n        date\\n        priceUSD\\n        totalLiquidityToken\\n        totalLiquidityUSD\\n        totalLiquidityETH\\n        dailyVolumeETH\\n        dailyVolumeToken\\n        dailyVolumeUSD\\n      }\\n    }\\n    \"])));\n\n  var _useQuery = useQuery(DAY_DATA),\n      topLoading = _useQuery.loading;\n\n  var now = new Date();\n  var startOfDay = new Date(now.getFullYear(), now.getMonth(), now.getDate());\n\n  if (startOfDay.getTimezoneOffset()) {\n    var timestamp = startOfDay / 1000 + 3600;\n  } else {\n    var timestamp = startOfDay / 1000;\n  }\n\n  if (topLoading) {\n    return /*#__PURE__*/React.createElement(Box, {\n      w: \"100%\",\n      h: \"100vh\",\n      bgGradient: [\"linear(to-tr, pink.300,purple.400)\", \"linear(to-t, black.200, teal.500)\", \"linear(to-b, purple.100, pink.300)\"],\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Center, {\n      h: \"50%\",\n      w: \"100%\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Spinner, {\n      thickness: \"4px\",\n      speed: \"0.65s\",\n      emptyColor: \"gray.200\",\n      color: \"pink.500\",\n      size: \"xl\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 11\n      }\n    })));\n  }\n\n  return /*#__PURE__*/React.createElement(Box, {\n    h: \"100vh\",\n    w: \"100%\",\n    color: \"black\",\n    bgGradient: [\"linear(to-tr, pink.300,purple.400)\", \"linear(to-t, black.200, teal.500)\", \"linear(to-b, purple.100, pink.300)\"],\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Stack, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Navbar, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(VStack, {\n    spacing: \"25px\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Heading, {\n    size: \"lg\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 11\n    }\n  }, \" Top Tokens by Daily Volume USD \"), /*#__PURE__*/React.createElement(ApolloProvider, {\n    client: client,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(ApolloTableQL, {\n    query: DAY_DATA,\n    variables: {\n      date: timestamp\n    },\n    onRowClick: function onRowClick(data) {\n      return handleRouteToken(data.token.id);\n    },\n    columns: [{\n      id: 'token.symbol',\n      label: 'Token Symbol',\n      nodeStyle: 'nodeStyle1'\n    }, {\n      id: 'totalLiquidityUSD',\n      label: 'Total Liquidity USD',\n      component: function component(data) {\n        return parseFloat(data).toFixed(0).toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n      }\n    }, {\n      id: 'dailyVolumeUSD',\n      label: 'Daily Volume USD',\n      component: function component(data) {\n        return parseFloat(data).toFixed(0).toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n      },\n      sort: function sort(data, property) {\n        return data.sort(data.dailyVolumeUSD);\n      },\n      nodeStyle: function nodeStyle(data) {\n        if (data.dailyVolumeUSD / data.totalLiquidityUSD > 1) return 'custom-style-class-red';\n        if (data.totalLiquidityUSD / data.dailyVolumeUSD > 10) return 'custom-style-class-green';\n      }\n    }, {\n      id: 'priceUSD',\n      label: 'Price',\n      component: function component(data) {\n        return parseFloat(data).toFixed(5).toString();\n      },\n      nodeStyle: 'nodeStyle1'\n    }],\n    pagination: {\n      pageLimit: 5,\n      pageNeighbors: 2,\n      currentPage: 1,\n      onPageChanged: function onPageChanged(_ref) {\n        var currentPage = _ref.currentPage,\n            totalPages = _ref.totalPages,\n            pageLimit = _ref.pageLimit,\n            totalRecords = _ref.totalRecords;\n      }\n    },\n    styles: {\n      table: 'ReactTable.rt-table.-pagination',\n      thead: 'ReactTable.rt-thead',\n      tbody: 'ReactTable .rt-tbody'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(VStack, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(Tag, {\n    size: \"lg\",\n    colorScheme: \"red\",\n    borderRadius: \"full\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(TagLabel, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 19\n    }\n  }, \" Red = Daily Volume \", \" > \", \" Liquidity\")), /*#__PURE__*/React.createElement(Tag, {\n    size: \"lg\",\n    colorScheme: \"green\",\n    borderRadius: \"full\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(TagLabel, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 19\n    }\n  }, \" Green = Liquidity \", \" > \", \" 10x Daily Volume\"))))))));\n};\n\n_s(TopTokens, \"WlOX5RvWCIG96suj/Uj2kYzvuOA=\", false, function () {\n  return [useHistory, useQuery];\n});\n\n_c = TopTokens;\nexport default TopTokens;\n\nvar _c;\n\n$RefreshReg$(_c, \"TopTokens\");","map":{"version":3,"sources":["/Users/jackevans/Documents/GitHub/ULA-MScCompSci/src/routes/TopTokens.jsx"],"names":["React","gql","useQuery","useHistory","ApolloClient","InMemoryCache","HttpLink","ApolloTableQL","ApolloProvider","Tag","TagLabel","Box","Center","Spinner","Stack","VStack","Heading","Navbar","client","link","uri","fetchOptions","mode","cache","TopTokens","history","handleRouteToken","props","push","pathname","state","DAY_DATA","topLoading","loading","now","Date","startOfDay","getFullYear","getMonth","getDate","getTimezoneOffset","timestamp","date","data","token","id","label","nodeStyle","component","parseFloat","toFixed","toString","replace","sort","property","dailyVolumeUSD","totalLiquidityUSD","pageLimit","pageNeighbors","currentPage","onPageChanged","totalPages","totalRecords","table","thead","tbody"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport gql from 'graphql-tag'\nimport { useQuery } from '@apollo/react-hooks'\nimport {useHistory} from 'react-router-dom'\n\nimport '../components/App.css'\nimport { ApolloClient } from 'apollo-client'\nimport { InMemoryCache } from 'apollo-cache-inmemory'\nimport { HttpLink } from 'apollo-link-http'\n\nimport { ApolloTableQL } from 'react-tableql'\nimport { ApolloProvider } from '@apollo/client';\n\nimport {Tag, TagLabel, Box, Center, Spinner, Stack, VStack, Heading } from \"@chakra-ui/react\"\n\nimport '../components/App.css'\nimport Navbar from '../components/Navbar.js'\n\nexport const client = new ApolloClient({\n  link: new HttpLink({\n    uri: 'https://api.thegraph.com/subgraphs/name/uniswap/uniswap-v2'\n  }),\n  fetchOptions: {\n    mode: 'no-cors'\n  },\n  cache: new InMemoryCache()\n})\n\nconst TopTokens = () => {\n\n  const history = useHistory();\n\n  const handleRouteToken = (props) => {\n    history.push({\n      pathname:\"/Token\",\n      state: {props},\n    })}\n    \n    //https://github.com/Danilo-Zekovic/react-tableql\n    //Table data query:\n\n    const DAY_DATA = gql`\n    query\n    tokens($date: Int!){\n      tokenDayDatas(first:100, orderBy: dailyVolumeUSD, orderDirection: desc,\n      where: {date: $date}\n      skip: 0) {\n        id\n        token {\n          symbol\n          name\n          id\n        }\n        date\n        priceUSD\n        totalLiquidityToken\n        totalLiquidityUSD\n        totalLiquidityETH\n        dailyVolumeETH\n        dailyVolumeToken\n        dailyVolumeUSD\n      }\n    }\n    `\n    const { loading: topLoading } = useQuery(DAY_DATA)\n\n\n\n    var now = new Date();\n    var startOfDay = new Date(now.getFullYear(), now.getMonth(), now.getDate());\n    if(startOfDay.getTimezoneOffset()){\n      var timestamp = (startOfDay / 1000)+3600; }\n      else{\n        var timestamp = (startOfDay / 1000)\n      }\n\n\n      if(topLoading){\n        return (\n\n        <Box\n        w=\"100%\"\n        h=\"100vh\"\n        bgGradient={[\n        \"linear(to-tr, pink.300,purple.400)\",\n        \"linear(to-t, black.200, teal.500)\",\n        \"linear(to-b, purple.100, pink.300)\",\n        ]}\n        >\n        <Center h=\"50%\" w=\"100%\">\n          <Spinner\n          thickness=\"4px\"\n          speed=\"0.65s\"\n          emptyColor=\"gray.200\"\n          color=\"pink.500\"\n          size=\"xl\"\n          />\n        </Center>\n\n      </Box>\n            )\n      }\n\n      return (\n      <Box\n      h=\"100vh\" \n      w=\"100%\" \n      color=\"black\" bgGradient={[\n      \"linear(to-tr, pink.300,purple.400)\",\n      \"linear(to-t, black.200, teal.500)\",\n      \"linear(to-b, purple.100, pink.300)\",\n      ]}>\n      <Stack>\n\n        <Navbar/>\n        <VStack spacing=\"25px\">\n          <Heading  size=\"lg\"> Top Tokens by Daily Volume USD </Heading>\n          <ApolloProvider client={client}>\n\n            <ApolloTableQL\n            query={DAY_DATA}  \n            variables = {{date: timestamp }}\n            onRowClick={(data => handleRouteToken((data.token.id)))}\n\n            columns={[\n            {id:'token.symbol',label:'Token Symbol', nodeStyle: 'nodeStyle1',},\n            {id: 'totalLiquidityUSD', label:'Total Liquidity USD',\n            component: data => parseFloat(data).toFixed(0).toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',')},\n            {id:'dailyVolumeUSD', label:'Daily Volume USD', component: data => parseFloat(data).toFixed(0).toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ','), \n            sort: (data, property) => data.sort(data.dailyVolumeUSD) ,nodeStyle: data => {\n              if ((data.dailyVolumeUSD/data.totalLiquidityUSD)>1) return 'custom-style-class-red'\n              if ((data.totalLiquidityUSD/data.dailyVolumeUSD)>10) return 'custom-style-class-green'\n            }},\n            {id: 'priceUSD' , label: 'Price', component: data => parseFloat(data).toFixed(5).toString(),\n            nodeStyle: 'nodeStyle1'}\n            ]}\n            pagination={\n              {\n                pageLimit: 5,\n                pageNeighbors:2,\n                currentPage:1,\n                onPageChanged:({currentPage, totalPages, pageLimit, totalRecords}) => {\n                }\n              }\n            }\n            styles={{\n\n              table:'ReactTable.rt-table.-pagination',\n              thead:'ReactTable.rt-thead',\n              tbody:'ReactTable .rt-tbody'\n\n            }}\n            />      \n            <div>\n              <VStack>\n                <Tag size=\"lg\" colorScheme=\"red\" borderRadius=\"full\">\n                  <TagLabel> Red = Daily Volume {\" > \"} Liquidity</TagLabel>\n                </Tag>\n                <Tag size=\"lg\" colorScheme=\"green\" borderRadius=\"full\">\n                  <TagLabel> Green = Liquidity {\" > \"} 10x Daily Volume</TagLabel>\n                </Tag>\n              </VStack>\n\n\n            </div>\n\n          </ApolloProvider>\n        </VStack>\n      </Stack>\n    </Box>\n\n            );\n\n    }\n\n\n\n    export default TopTokens;\n\n"]},"metadata":{},"sourceType":"module"}