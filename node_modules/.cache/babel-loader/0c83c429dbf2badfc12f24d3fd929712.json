{"ast":null,"code":"import _taggedTemplateLiteral from \"/Users/jackevans/Documents/GitHub/ULA-MScCompSci/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nvar _this = this,\n    _templateObject,\n    _jsxFileName = \"/Users/jackevans/Documents/GitHub/ULA-MScCompSci/src/routes/TopPairs.jsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport gql from 'graphql-tag';\nimport { useQuery } from '@apollo/react-hooks';\nimport { useHistory } from 'react-router-dom';\nimport '../components/App.css';\nimport { ApolloClient } from 'apollo-client';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport { HttpLink } from 'apollo-link-http';\nimport { ApolloTableQL } from 'react-tableql';\nimport { ApolloProvider } from '@apollo/client';\nimport { VStack, Center, Spinner, Box, Stack, Heading } from \"@chakra-ui/react\";\nimport Navbar from '../components/Navbar.js'; //https://github.com/Danilo-Zekovic/react-tableql\n\nexport var client = new ApolloClient({\n  link: new HttpLink({\n    uri: 'https://api.thegraph.com/subgraphs/name/uniswap/uniswap-v2'\n  }),\n  fetchOptions: {\n    mode: 'no-cors'\n  },\n  cache: new InMemoryCache()\n});\n\nvar TopPairs = function TopPairs() {\n  _s();\n\n  var history = useHistory();\n\n  var handleRouteTokenPairs = function handleRouteTokenPairs(props) {\n    history.push({\n      pathname: \"/token-pairs\",\n      state: {\n        props: props\n      }\n    });\n  };\n\n  var topLiquidPairs_QUERY = gql(_templateObject || (_templateObject = _taggedTemplateLiteral([\"\\n  query\\n  pair($date: Int!){\\n pairDayDatas( orderBy: dailyVolumeUSD, orderDirection: desc,\\n   where: {\\n      date: $date\\n   }\\n ) \\n {\\n   id\\n  token0{\\n    name\\n    symbol\\n  }\\n  token1{\\n    name\\n    symbol\\n  }  \\n     date\\n     dailyVolumeToken0\\n     dailyVolumeToken1\\n     dailyVolumeUSD\\n     reserveUSD\\n     pairAddress\\n }\\n}\"])));\n  var now = new Date();\n  var startOfDay = new Date(now.getFullYear(), now.getMonth(), now.getDate());\n\n  if (startOfDay.getTimezoneOffset()) {\n    var timestamp = startOfDay / 1000 + 3600;\n  } else {\n    var timestamp = startOfDay / 1000;\n  }\n\n  var _useQuery = useQuery(topLiquidPairs_QUERY, {\n    variables: {\n      date: timestamp\n    }\n  }),\n      topLoading = _useQuery.loading;\n\n  if (topLoading) {\n    return /*#__PURE__*/React.createElement(Box, {\n      w: \"100%\",\n      h: \"100vh\",\n      bgGradient: [\"linear(to-tr, pink.300,purple.400)\", \"linear(to-t, black.200, teal.500)\", \"linear(to-b, purple.100, pink.300)\"],\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(Center, {\n      h: \"50%\",\n      w: \"100%\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(Spinner, {\n      thickness: \"4px\",\n      speed: \"0.65s\",\n      emptyColor: \"gray.200\",\n      color: \"pink.500\",\n      size: \"xl\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 5\n      }\n    })));\n  }\n\n  return /*#__PURE__*/React.createElement(Box, {\n    w: \"100%\",\n    h: \"100vh\",\n    bgGradient: [\"linear(to-tr, pink.300,purple.400)\", \"linear(to-t, black.200, teal.500)\", \"linear(to-b, purple.100, pink.300)\"],\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(Stack, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 1\n    }\n  }, /*#__PURE__*/React.createElement(Navbar, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 1\n    }\n  }), /*#__PURE__*/React.createElement(VStack, {\n    spacing: \"25px\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 1\n    }\n  }, /*#__PURE__*/React.createElement(Heading, {\n    size: \"lg\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 5\n    }\n  }, \" Top Pairs by Daily Volume USD \"), /*#__PURE__*/React.createElement(ApolloProvider, {\n    client: client,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 1\n    }\n  }, /*#__PURE__*/React.createElement(ApolloTableQL, {\n    query: topLiquidPairs_QUERY,\n    styles: {\n      table: 'ReactTable.rt-table.-pagination',\n      thead: 'ReactTable.rt-thead',\n      tbody: 'ReactTable .rt-tbody'\n    },\n    variables: {\n      date: timestamp\n    },\n    onRowClick: function onRowClick(data) {\n      return handleRouteTokenPairs(data.pairAddress);\n    },\n    columns: [{\n      id: 'token0.symbol',\n      label: 'Token 1 Symbol'\n    }, {\n      id: 'token1.symbol',\n      label: 'Token 2 Symbol'\n    }, {\n      id: 'dailyVolumeUSD',\n      label: 'Daily Volume USD',\n      component: function component(data) {\n        return parseFloat(data).toFixed(0).toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n      },\n      sort: function sort(data, property) {\n        return data.sort(data.dailyVolumeUSD);\n      }\n    }],\n    pagination: {\n      pageLimit: 5,\n      pageNeighbors: 2,\n      currentPage: 1,\n      onPageChanged: function onPageChanged(_ref) {\n        var currentPage = _ref.currentPage,\n            totalPages = _ref.totalPages,\n            pageLimit = _ref.pageLimit,\n            totalRecords = _ref.totalRecords;\n      }\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 1\n    }\n  })))));\n};\n\n_s(TopPairs, \"wEEXAJebxfdZKWJ1yvmMFQG2EkY=\", false, function () {\n  return [useHistory, useQuery];\n});\n\n_c = TopPairs;\nexport default TopPairs;\n\nvar _c;\n\n$RefreshReg$(_c, \"TopPairs\");","map":{"version":3,"sources":["/Users/jackevans/Documents/GitHub/ULA-MScCompSci/src/routes/TopPairs.jsx"],"names":["React","gql","useQuery","useHistory","ApolloClient","InMemoryCache","HttpLink","ApolloTableQL","ApolloProvider","VStack","Center","Spinner","Box","Stack","Heading","Navbar","client","link","uri","fetchOptions","mode","cache","TopPairs","history","handleRouteTokenPairs","props","push","pathname","state","topLiquidPairs_QUERY","now","Date","startOfDay","getFullYear","getMonth","getDate","getTimezoneOffset","timestamp","variables","date","topLoading","loading","table","thead","tbody","data","pairAddress","id","label","component","parseFloat","toFixed","toString","replace","sort","property","dailyVolumeUSD","pageLimit","pageNeighbors","currentPage","onPageChanged","totalPages","totalRecords"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport gql from 'graphql-tag'\nimport { useQuery } from '@apollo/react-hooks'\nimport {useHistory} from 'react-router-dom'\n\nimport '../components/App.css'\nimport { ApolloClient } from 'apollo-client'\nimport { InMemoryCache } from 'apollo-cache-inmemory'\nimport { HttpLink } from 'apollo-link-http'\nimport { ApolloTableQL } from 'react-tableql'\nimport { ApolloProvider } from '@apollo/client';\n\nimport { VStack, Center, Spinner, Box, Stack, Heading } from \"@chakra-ui/react\"\n\nimport Navbar from '../components/Navbar.js'\n\n//https://github.com/Danilo-Zekovic/react-tableql\n\n  export const client = new ApolloClient({\n  link: new HttpLink({\n    uri: 'https://api.thegraph.com/subgraphs/name/uniswap/uniswap-v2'\n  }),\n  fetchOptions: {\n    mode: 'no-cors'\n  },\n  cache: new InMemoryCache()\n})\n\n\nconst TopPairs = () => {\n\n  const history = useHistory();\n\n   const handleRouteTokenPairs = (props) => {\n  history.push({\n    pathname:\"/token-pairs\",\n    state: {props},\n})}\n   \n const topLiquidPairs_QUERY = gql`\n  query\n  pair($date: Int!){\n pairDayDatas( orderBy: dailyVolumeUSD, orderDirection: desc,\n   where: {\n      date: $date\n   }\n ) \n {\n   id\n  token0{\n    name\n    symbol\n  }\n  token1{\n    name\n    symbol\n  }  \n     date\n     dailyVolumeToken0\n     dailyVolumeToken1\n     dailyVolumeUSD\n     reserveUSD\n     pairAddress\n }\n}`\n\nvar now = new Date();\nvar startOfDay = new Date(now.getFullYear(), now.getMonth(), now.getDate());\n  if(startOfDay.getTimezoneOffset()){\n  var timestamp = (startOfDay / 1000)+3600; }\n  else{\n   var timestamp = (startOfDay / 1000)\n  }\n\nconst {loading: topLoading } = useQuery(topLiquidPairs_QUERY, {\n    variables: {\n      date: timestamp\n    }})\n\nif(topLoading){\n  return (\n\n    <Box\n  w=\"100%\"\n  h=\"100vh\"\n  bgGradient={[\n    \"linear(to-tr, pink.300,purple.400)\",\n    \"linear(to-t, black.200, teal.500)\",\n    \"linear(to-b, purple.100, pink.300)\",\n  ]}\n>\n    <Center h=\"50%\" w=\"100%\">\n    <Spinner\n    thickness=\"4px\"\n    speed=\"0.65s\"\n    emptyColor=\"gray.200\"\n    color=\"pink.500\"\n    size=\"xl\"\n    />\n    </Center>\n\n    </Box>\n    )\n}\n\nreturn (\n\t <Box\n  w=\"100%\"\n  h=\"100vh\"\n  bgGradient={[\n    \"linear(to-tr, pink.300,purple.400)\",\n    \"linear(to-t, black.200, teal.500)\",\n    \"linear(to-b, purple.100, pink.300)\",\n  ]}\n>\n<Stack>\n<Navbar/>\n<VStack spacing=\"25px\">\n    <Heading  size=\"lg\"> Top Pairs by Daily Volume USD </Heading>\n<ApolloProvider client={client}>\n<ApolloTableQL\nquery={topLiquidPairs_QUERY} \nstyles={\n  {\n    table:'ReactTable.rt-table.-pagination',\n    thead:'ReactTable.rt-thead',\n    tbody:'ReactTable .rt-tbody'\n  }\n}\nvariables={{date: timestamp }}\nonRowClick={data => (handleRouteTokenPairs(data.pairAddress))}\ncolumns={[\n  {id:'token0.symbol',label:'Token 1 Symbol'},\n  {id:'token1.symbol',label:'Token 2 Symbol',},\n  {id:'dailyVolumeUSD', label:'Daily Volume USD', component: data => parseFloat(data).toFixed(0).toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ','),\n  sort: (data, property) => data.sort(data.dailyVolumeUSD),},\n  ]}\npagination={\n{\n  pageLimit:5,\n  pageNeighbors:2,\n  currentPage:1,\n  onPageChanged:({currentPage, totalPages, pageLimit, totalRecords}) => {\n      }\n    }\n  }/> \n  </ApolloProvider>\n   </VStack>\n   </Stack>\n    </Box>\n \n);\n\n}\n\n\n\nexport default TopPairs;\n\n"]},"metadata":{},"sourceType":"module"}